@execute

123, 123
"return 123", 123
"123 + 456", 579
"'hello' $ ' ' $ 'world'", "'hello world'"
"1 + 2 * 3", "7"
"a = 2; -a", "-2"
"a = true; not a", false
"x = 123; y = 456; x + y", 579

"1000 is 1e3"
"1e3 is 1000"
"10e3 is 1e4"
".001 is 0.001"

"a = 0; ++a", 1
"a = 0; a++", 0
"a = 0; a++; a", 1
"a = 0; --a", -1
"a = 0; a--", 0
"a = 0; a--; a", -1

"Suneido.a = 0; ++Suneido.a", 1
"Suneido.a = 0; Suneido.a++", 0
"Suneido.a = 0; Suneido.a++; Suneido.a", 1
"Suneido.a = 0; --Suneido.a", -1
"Suneido.a = 0; Suneido.a--", 0
"Suneido.a = 0; Suneido.a--; Suneido.a", -1

"Suneido[0] = 0; ++Suneido[0]", 1
"Suneido[0] = 0; Suneido[0]++", 0
"Suneido[0] = 0; Suneido[0]++; Suneido[0]", 1
"Suneido[0] = 0; --Suneido[0]", -1
"Suneido[0] = 0; Suneido[0]--", "0"
"Suneido[0] = 0; Suneido[0]--; Suneido[0]", -1

"2 < 3", true
"3 < 2", false
"2 < 2", false
"1.1 < 1.2", true
"1.2 < 1.1", false
"#(.5) < #(99)", true
"#(99) < #(.5)", false

"2 <= 3", true
"3 <= 2", false
"2 <= 2", true

"2 > 3", false
"3 > 2", true
"2 > 2", false

"2 >= 3", false
"3 >= 2", true
"2 >= 2", true

"'abc' =~ '^[a-c]+$'", true
"'abcx' !~ '^[a-c]+$'", true

"s = 1; s $= 2", "'12'"
"n = 10; n -= 5", 5

"t = true; f = false; t and t", true
"t = true; f = false; t and f", false
"t = true; f = false; f and t", false
"t = true; f = false; f and f", false
"t = true; f = false; t or t", true
"t = true; f = false; t or f", true
"t = true; f = false; f or t", true
"t = true; f = false; f or f", false

"x = true; x ? 1 : 2", 1
"x = false; x ? 1 : 2", 2

"0 in (1,2,3)", false
"1 in (1,2,3)", true
"2 in (1,2,3)", true
"3 in (1,2,3)", true

"i = 0; while i < 4 { ++i } i", 4

"x = 4; if x > 3 { return 1 } else { return -1 }", 1
"x = 2; if x > 3 { return 1 } else { return -1 }", -1

"x = 2
switch {
case x < 3: return -1
case x == 3: return 0
case x > 3: return +1
}", -1

"x = 3
switch {
case x < 3: return -1
case x == 3: return 0
case x > 3: return +1
}", 0

"x = 4
switch {
case x < 3: return -1
case x == 3: return 0
case x > 3: return +1
}", 1

"x = 4
switch x {
case 3: return 0
default: return 1
}", 1

"s='hello'; s[0]", 'h'
"s='hello'; s[4]", 'o'
"s='hello'; s[9]", "''"
"s='hello'; s[-1]", 'o' // end relative
"s='hello'; s[-5]", 'h' // end relative
"s='hello'; s[-6]", "''"

"x=#(1,2,3); x[0]", 1
"x=#(1,2,3); x[2]", 3
"x=#(1,2,3); x[3]" throws "uninitialized member: 3"
"x=#(1,2,3); x[-1]" throws "uninitialized member: -1"

// only "" and false should convert to number or integer

// convert to number - folding
"123 + ''", 123
"123 + false", 123
"-true" throws "can't convert true to number"
"123 + true" throws "can't convert true to number"
"123 + '111'" throws "can't convert String to number"
// convert to number
"x = 123; x + ''", 123
"x = 123; x + false", 123
"x = true; -x" throws "can't convert true to number"
"x = 123; x + true" throws "can't convert true to number"
"x = 123; x + '111'" throws "can't convert String to number"
// convert to integer - folding
"0xff & 0xf", 0xf
"~true" throws "can't convert true to integer"
"0xff & true" throws "can't convert true to integer"
"0xff & '1'" throws "can't convert String to integer"
"4.8 % 2" throws "can't convert number to integer"
// convert to integer
"x = 0xff; x & 0xf", 0xf
"x = true; ~x" throws "can't convert true to integer"
"x = 0xff; x & true" throws "can't convert true to integer"
"x = 0xff; x & '1'" throws "can't convert String to integer"
"x = 4.8; x % 2" throws "can't convert number to integer"

"s = 'hello'; s[1.2]" throws "indexes must be integers"
"s = 'hello'; s['']" throws "indexes must be integers"
"s = 'hello'; s[false]" throws "indexes must be integers"
"s = 'hello'; s['' ..]" throws "indexes must be integers"
"s = 'hello'; s[false ..]" throws "indexes must be integers"
"s = 'hello'; s['' ::]" throws "indexes must be integers"
"s = 'hello'; s[false ::]" throws "indexes must be integers"
"x = #(); x['' ::]" throws "indexes must be integers"
"x = #(); x[false ::]" throws "indexes must be integers"

@execute // argument handling
"Object().Add(@Seq(1000)).Size()", 1000 //  // Add(@ shouldn't expand onto stack

"Type(ServerEval('Thread.List'))", 'Object' // ServerEval does @+1 args
"Type(ServerEval(@#('Thread.List')))", 'Object'
"Type(ServerEval(@+1#(123, 'Thread.List')))", 'Object'

"Object(a: 123).Eval(function (x) { x * .a }, 10)", 1230
"Object(a: 123).Eval(@#(function (x) { x * .a }, 10))", 1230

@execute // unary plus and minus conversions
// fold
"+true" throws "can't convert true to number"
"+false", 0
"-true" throws "can't convert true to number"
"-false", 0
// execute
"x = true; +x" throws "can't convert true to number"
"x = false; +x", 0
"x = true; -x" throws "can't convert true to number"
"x = false; -x", 0
