@dnum_add // arg[0] + arg[1] == arg[2] && arg[1] + arg[0] == arg[2]

// special cases (no actual math)
0, 0, 0
0, 1, 1
123, 0, 123
inf, -inf, 0
inf, inf, inf
-inf, -inf, -inf
inf, 123, inf
-inf, 123, -inf

// aligned
123, 456, 579
-123, -456, -579
1.23e9, 4.56e9, 5.79e9

// need aligning
1e12, 1e14, 1.01e14
123, 1e-99, 123
1e-99, 123, 123
11111111111111111111, 2222222222222222222e-4, 11111333333333333333
11111111111111111111, 6666666666666666666e-4, 11111777777777777778

// int64 overflow
18446744073709551615, 11, 18446744073709551630
18446744073709551615e126, 18446744073709551615e126, inf


//------------------------------------------------------------------------------
@dnum_sub // arg[0] - arg[1] == arg[2] && arg[1] - arg[0] == -arg[2]

// special cases (no actual math)
0, 0, 0
123, 0, 123
inf, -inf, inf
inf, inf, 0
-inf, -inf, 0
inf, 123, inf

// aligned
456, 123, 333
-123, -456, 333
4.56e9, 1.23e9, 3.33e9

// need aligning
123, 1e-99, 123
1e99, 123, 1e99
1e14, 1e12, 9.9e13
12222222222222222222, 11111111111111111111e-4, 12221111111111111111

//------------------------------------------------------------------------------
@dnum_mul // arg[0] * arg[1] == arg[2] && arg[1] * arg[0] == arg[2]

// special cases (no actual math)
0, 0, 0
1, -1, -1
-1, -1, 1
123, 0, 0
123, inf, inf
inf, inf, inf

// result fits in uint64
2, 333, 666
2e9, 333e-9, 666
2e3, 3e3, 6e6
123456789000000000, 123456789000000000, 1.5241578750190521e34

// result too big for uint64
1234567890123456, 1234567890123456, 1.524157875323881728e30

// exp overflow
2e99, 2e99, inf

//------------------------------------------------------------------------------
@dnum_div // arg[0] / arg[1] == arg[2]

// special cases (no actual math)
0, 0, 0
1, -1, -1
-1, -1, 1
123, 0, inf
123, inf, 0
inf, 123, inf
inf, inf, 1
123, 123, 1
123000, .000123, 1e9 // equal coef

// exp overflow
1e99, 1e-99, inf
1e-99, 1e99, 0

// divides evenly
4444, 2222, 2
2222, 4444, .5
1, 8, .125

// long division
1, 3, .3333333333333333333
2, 3, .6666666666666666666
11, 17, .6470588235294117647
1234567890123456, 9876543210123456, .12499999887187493

//------------------------------------------------------------------------------
@dnum_cmp // each value is less than all following values and vice versa

-inf, -12345678901234567899, -1e9, -123456, -9, -1, -1e-9,
	0, 1e-9, 1, 9, 123456, 1e9, 12345678901234567899, inf
