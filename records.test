@execute // observers

// multiple observers
`r = Record()
r.Observer({|member| o1 = member })
r.Observer({|member| o2 = member })
r.foo = 123
[o1, o2]`, `#(foo,foo)`

// RemoveObserver
`r = Record()
r.Observer(b1 = {|member| o1 = member })
r.Observer({|member| o2 = member })
r.foo = 123
r.RemoveObserver(b1)
r.bar = 456
[o1, o2]`, `#(foo,bar)`

// observer called as method
`r = Record()
r.Observer({|member| o = member $ '=' $ this[member] })
r.foo = 123
o`, `"foo=123"`

// recursive with different members allowed
`r = Record()
r.Observer({|member| .bar = 456; o = member })
r.foo = 123
o`, `bar`

// PreSet doesn't call observers
`r = Record()
o = false
r.Observer({|member| o = member })
r.PreSet(#foo, 123)
[o,r.foo]`, `#(false,123)`

// _lower! with no value
`r = Record()
r.foo_lower!`, `""`

// _lower! with non-string
`r = Record(foo: true)
r.foo_lower!`, `true`

// _lower!
`r = Record(foo: "Hello World")
r.foo_lower!`, `"hello world"`
